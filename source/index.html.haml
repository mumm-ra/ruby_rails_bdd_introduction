%section#intro

  %h1 Ruby
  %h3.fragment{:"data-fragment-index" => "0" } Ruby on Rails 
  %h3.fragment{:"data-fragment-index" => "1" } and BDD
  %img{src: "images/ruby-mini-logo.png", alt: "Ruby logo"}
  %p
    %small Created by BB and SS
%section
  %section
    %h2 Ruby
    %p A little history
    %img{src: "images/896221024257.png", alt: "Ruby logo"}
  %section
    %h3 Ruby
    %ul
      %li 1993 - 1995 - 2005
      %li Perl - Python - Smalltalk
      %li Several implementations - RubySpec
      %li.fragment{:"data-fragment-index" => "0" } Happy and Productive Programmers
    %img{src: "images/ruby-lang-matz.png", alt: "Ruby logo"}
    %img{src: "images/david.heinemeier.jpg", width:"200px", height:"200px", alt: "Ruby logo"}
    
%section
  %section
    %h2 Ruby Syntax
    %p Starting from scratch.
    %img{src: "images/photo-ruby2x.jpg", alt: "Ruby logo"}
  %section
    %h2 Going deep...
    %ul
      %li Fully Object Oriented
      %li.fragment{:"data-fragment-index" => "0" } Interpreted
      %li.fragment{:"data-fragment-index" => "1" } Strongly typed with dynamic types
      %li.fragment{:"data-fragment-index" => "2" } Duck typing
      %li.fragment{:"data-fragment-index" => "3" } Succint and flexible syntax
  %section
    %h2 Hello World
    %pre.prettyprint.lang-ruby.fragment{:"data-fragment-index" => "0" }
      %code.lang-ruby puts 'Hello World'
    %p.fragment{:"data-fragment-index" => "1"}
      >> Hello World
  %section
    %h2 Conventions
    %ul
      %li Classes
      %li variables
      %li CONSTANTS
    %img{src: "images/standards.gif", alt: "Ruby logo"} 

  %section
    %h2 IRB
    %p Interactive Ruby Shell
    %img{src: "images/irbconsole.gif", alt: "Ruby logo"}
  %section
    %h2 RubyGems
    %p Centralized package management.
    %img{src: "images/rubygems.png", alt: "Ruby logo"}
%section
  %section
    %h1 Ruby on Rails
    %p Web development that doesn't hurt
    %img{src: "images/RubyOnRails.png", width:"250px", height:"250px", alt: "Ruby logo"}
  %section
    %h2 The framework
    %ul
      %li MVC Architecture
      %li Active Record Pattern
  %section
    %h3 Convention over configuration
    %img{src: "images/sexpl18.jpg", width:"400px", height:"550px", alt: "Ruby logo"}
  %section
    %h3 Convention over configuration
    %ul
      %li Table names
      %li Foreign Keys
      %li Routing
      %li Templates
      %li Generators
  %section
    %h3 Convention over configuration
    %p Doing the configuration
    %pre
      %code.lang-ruby
        :preserve
          class Post < ActiveRecord::Base
            set_table_name 'news'

            has_many :comments, class_name: 'Comentario', 
              primary_key: 'news_id'
          end
    %p Following the convention
    %pre
      %code.lang-ruby
        :preserve
          class Post < ActiveRecord::Base
            has_many :comments
          end

  %section
    %h2 Don't Repeat Yourself
    %p Every piece of knowledge must have a single, unambiguous, authoritative representation within a system
    %img{src: "images/DRY.jpg", alt: "Ruby logo"}
  %section
    %h2 Scaffolding
    %img{src: "images/scaffold.gif", alt: "Ruby logo"}
  %section
    %h2 REST
    %small
      <table class="wikitable">
      <tbody><tr>
      <th>Resource</th>
      <th>GET</th>
      <th>PUT</th>
      <th>POST</th>
      <th>DELETE</th>
      </tr>
      <tr>
      <th><code>http://url.com/resources</code></th>
      <td><b>List</b> the URIs.</td>
      <td><b>Replace</b> the entire collection with another collection.</td>
      <td><b>Create</b> a new entry in the collection.</td>
      <td><b>Delete</b> the entire collection.</td>
      </tr>
      <tr>
      <th><code>http://url.com/resources/item17</code></th>
      <td><b>Retrieve</b> a representation of the addressed member of the collection.</td>
      <td><b>Replace</b> the addressed member of the collection, or if it doesn't exist, <b>create</b> it.</td>
      <td>Not generally used.</td>
      <td><b>Delete</b> the addressed member of the collection.</td>
      </tr>
      </tbody></table>
    %p versus
    %small
      %ul
        %li getUsers()
        %li getNewUsersSince(date SinceDate)
        %li savePurchaseOrder(string CustomerID, string PurchaseOrderID)
    /%img{src: "images/rest3.jpg", width:"300px", height:"500px", alt: "Ruby logo"}
  %section
    %h2 The View
    %ul
      %li 
        HTML
        %ul
          %li 
            ERB
            %pre
              :escaped
                <p> Welcome, <%= user.name %> </p>
          %li 
            Haml
            %pre
              = '%p= "Welcome, #{user.name}"'

          %li 
            Slim
            %pre
              = 'p "Welcome, #{user.name}"'

      %li JSON
      %li XML
  %section
    %h2 Bundler
    %img{src: "images/gembundler.png", alt: "Ruby logo"}
  %section
    %h2 Deployment
    %img{src: "images/Phusion_passenger.png", width:"150px", height:"200px", alt: "Ruby logo"}
    %img{src: "images/capistrano.jpg", width:"300px", height:"100px", alt: "Ruby logo"}
    %img{src: "images/heroku-logo-white.jpg", width:"200px", height:"50px", alt: "Ruby logo"}
    %img{src: "images/engine_yard_logo.jpg", width:"200px", height:"250px", alt: "Ruby logo"}
    %img{src: "images/apache.jpg", width:"250px", height:"150px", alt: "Ruby logo"}
    
%section
  %section
    %h1 Behavior Driven Development
    %p Cucumber & RSpec
    %img{src: "images/cucumber_logo.png", alt: "Ruby logo"}
  %section
    %h2 What is BDD?
    %blockquote.fragment{:"data-fragment-index" => "0" }
      BDD is a second-generation, outside-in, pull-based, multiple-stakeholder, multiple-scale, high-automation, agile methodology. It describes a cycle of interactions with well-defined outputs, resulting in the delivery of working, tested software that matters.
  %section
    %h2 BDD
    %ul 
      %li Acceptance tests
      %li Business value
      %li Gherkin
      %li Natural Language
  %section
    %h2 Gherkin Example
    %pre.prettyprint
      %code
        :preserve
          Feature: Division
            In order to avoid silly mistakes
            Cashiers must be able to calculate a fraction

            Scenario: Regular numbers
              * I have entered 3 into the calculator
              * I have entered 2 into the calculator
              * I press divide
              * the result should be 1.5 on the screen
  %section
    %h2 Gherkin Example
    %pre.prettyprint.lang-ruby
      %code.lang-ruby   
        :preserve      
          Before do
            @calc = Calculator.new
          end
           
          After do
          end
           
          Given /I have entered (\d+) into the calculator/ do |n|
            @calc.push n.to_i
          end
           
          When /I press (\w+)/ do |op|
            @result = @calc.send op
          end
           
          Then /the result should be (.*) on the screen/ do |result|
            @result.should == result.to_f
          end
  %section
    %h2 RSpec
    %blockquote
      RSpec is a Behavior-Driven Development tool for Ruby programmers. RSpec helps you do the TDD part of BDD, focusing on the documentation and design aspects of TDD.
    /%img{src: "images/bdd-cycle-around-tdd-cycles.png", alt: "Ruby logo"}
  %section
    %h2 RSpec
    %p Express some basic desired behavior
    %pre.prettyprint.lang-ruby
      %code.lang-ruby
        :preserve
          # bowling_spec.rb
          require 'bowling'

          describe Bowling, "#score" do
            it "returns 0 for all gutter game" do
              bowling = Bowling.new
              20.times { bowling.hit(0) }
              expect(bowling.score).to eq(0)
            end
          end
  %section
    %h2 RSpec
    %p Run the example and watch it fail
    %pre.prettyprint
      %code
        :preserve
          $ rspec bowling_spec.rb

          ./bowling_spec.rb:4:
            uninitialized constant Bowling
  %section
    %h2 RSpec
    %p Write enough code to make it pass
    %pre.prettify.lang-ruby
      %code.lang-ruby
        %aside.notes
          Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).
        :preserve
          # bowling.rb
          class Bowling
            def hit(pins)
            end

            def score
              0
            end
          end
  %section
    %h2 RSpec
    %p Run the example again and enjoy that it's passing
    %pre.prettyprint
      %code
        :preserve
          $ rspec bowling_spec.rb --format nested

          Bowling#score
            returns 0 for all gutter game

          Finished in 0.007534 seconds

          1 example, 0 failures
  %section
    %h2 BDD Explained
    %img{src: "images/bdd-cycle-around-tdd-cycles.png", alt: "Ruby logo"}
%section
  %h1 Questions ?
  %img{src: "images/questions.jpg", alt: "Ruby logo"}
%section
  %img{src: "images/thank-you-funny.jpg", width:"610px", height:"600px",  alt: "Ruby logo"}
